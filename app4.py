import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import yfinance as yf
import plotly.graph_objs as go

# --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_astro_data():
    df = pd.read_csv("astro_data.csv", parse_dates=["Date"])
    df.set_index("Date", inplace=True)
    return df

# --- 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
def stock_par(tick_nm, start_dt='2020-01-01', end_dt=datetime.today()):
    temptick = yf.Ticker(tick_nm)
    data = temptick.history(start=start_dt, end=end_dt, interval="1d")
    data = data.reset_index()
    data['Date'] = data['Date'].dt.tz_localize(None)
    data['log_return'] = np.log(data['Close'] / data['Close'].shift(1))
    data['cumulative_return'] = data['log_return'].fillna(0).cumsum().apply(np.exp)
    data['EMA_100'] = data['Close'].ewm(span=100, adjust=False).mean()
    return data

# --- 3. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ç–∏–∫–µ—Ä–∞ ---
st.title("ü™êüìà –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è –∏ –†—ã–Ω–∫–∏")
tick_nm = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä GC=F)", value="GC=F")

df_astro = load_astro_data()
df_stock = stock_par(tick_nm)

# --- 4. –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã ---
st.subheader("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É (–≤–ª–∏—è–µ—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∏ –∞—Å—Ç—Ä–æ–¥–∞–Ω–Ω—ã–µ)")

min_date = df_stock['Date'].min().date()
max_date = df_stock['Date'].max().date()

slider_date = st.slider("üìÖ –î–∞—Ç–∞", min_value=min_date, max_value=max_date, value=max_date)
st.session_state["selected_date"] = slider_date

selected_date = st.session_state["selected_date"]
st.markdown(f"**üìÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:** `{selected_date}`")

# --- 5. –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ EMA + –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏ ---
st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ EMA —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –¥–∞—Ç—ã")

fig = go.Figure()
fig.add_trace(go.Scatter(
    x=df_stock['Date'], y=df_stock['Close'],
    mode='lines+markers', name='–¶–µ–Ω–∞'
))
fig.add_trace(go.Scatter(
    x=df_stock['Date'], y=df_stock['EMA_100'],
    mode='lines', name='EMA 100'
))

# –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
highlight_point = df_stock[df_stock['Date'].dt.date == selected_date]
if not highlight_point.empty:
    fig.add_trace(go.Scatter(
        x=highlight_point['Date'],
        y=highlight_point['Close'],
        mode='markers',
        marker=dict(color='red', size=10, symbol='star'),
        name='–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞'
    ))

fig.update_layout(
    title=f"{tick_nm}: –¶–µ–Ω–∞ –∏ EMA 100",
    xaxis_title="–î–∞—Ç–∞",
    yaxis_title="–¶–µ–Ω–∞",
    hovermode="x unified",
    template="plotly_white"
)

st.plotly_chart(fig, use_container_width=True)

# --- 6. –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É ---
date_str = selected_date.strftime("%Y-%m-%d")
astro_row = df_astro.loc[df_astro.index.strftime("%Y-%m-%d") == date_str]

# --- 7. –ê—Å–ø–µ–∫—Ç—ã –∏ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ—Å—Ç—å ---
aspects_allowed = {"Conjunction", "Sextile", "Square", "Trine", "Opposition"}

col1, col2 = st.columns(2)

with col1:
    st.subheader("üîó –ê—Å–ø–µ–∫—Ç—ã (–±–µ–∑ Chiron)")
    if not astro_row.empty:
        row = astro_row.iloc[0]
        aspect_cols = [col for col in df_astro.columns if col.endswith("_x") and "Chiron" not in col]
        filtered_aspects = row[aspect_cols].dropna()
        filtered_aspects = filtered_aspects[filtered_aspects.isin(aspects_allowed)]

        if not filtered_aspects.empty:
            st.dataframe(filtered_aspects.to_frame().style.applymap(lambda v: "background-color: lightblue"))
        else:
            st.info("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤.")
    else:
        st.warning("–î–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")

with col2:
    st.subheader("üåÄ –†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–µ / –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã")
    if not astro_row.empty:
        status_cols = [col for col in df_astro.columns if col.endswith("_status")]
        status_today = astro_row.iloc[0][status_cols]
        filtered_status = status_today[status_today.isin(["Stationary", "Retrograde"])]

        if not filtered_status.empty:
            st.dataframe(filtered_status.to_frame().style.applymap(
                lambda v: "background-color: orange" if v == "Stationary" else "background-color: lightpink"
            ))
        else:
            st.info("–ù–µ—Ç —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã—Ö –∏–ª–∏ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã—Ö –ø–ª–∞–Ω–µ—Ç.")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")

# --- 8. –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫—Ä—É–≥ ---
df_planets = pd.read_csv('df_planets.csv')
df_planets = df_planets.set_index(['Date'])

def get_planet_positions(date, df_planets):
    date = pd.to_datetime(date).normalize()
    df_planets.index = pd.to_datetime(df_planets.index).normalize()
    if date not in df_planets.index:
        return {planet.replace('_lon', ''): None for planet in df_planets.columns if planet.endswith('_lon')}

    row = df_planets.loc[date]
    positions = {col.replace('_lon', ''): row[col] for col in df_planets.columns if col.endswith('_lon')}
    return positions

st.subheader("üß≠ –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ –∫—Ä—É–≥–µ")

positions = get_planet_positions(pd.to_datetime(selected_date), df_planets)
fig2, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})
ax.set_theta_direction(-1)
ax.set_theta_offset(np.pi / 2)
ax.set_yticklabels([])

for planet, angle in positions.items():
    if angle is not None:
        theta = np.deg2rad(angle)
        ax.plot([theta], [1], 'o', label=planet)
        ax.text(theta, 1.1, planet, ha='center', va='center', fontsize=9)

ax.legend(loc="upper right", bbox_to_anchor=(1.2, 1.2))
st.pyplot(fig2)

